[1mdiff --git a/backend/src/routes/client.routes.js b/backend/src/routes/client.routes.js[m
[1mnew file mode 100644[m
[1mindex 0000000..cb5407f[m
[1m--- /dev/null[m
[1m+++ b/backend/src/routes/client.routes.js[m
[36m@@ -0,0 +1,123 @@[m
[32m+[m[32m'use strict';[m
[32m+[m
[32m+[m[32mconst express = require('express');[m
[32m+[m[32mconst multer = require('multer');[m
[32m+[m[32mconst router = express.Router();[m
[32m+[m[32mconst ClientImage = require('../models/ClientImage');[m
[32m+[m[32mconst cloudinaryService = require('../services/cloudinary');[m
[32m+[m[32mconst { logger } = require('../setup/logger');[m
[32m+[m
[32m+[m[32m// Configure multer for memory storage[m
[32m+[m[32mconst storage = multer.memoryStorage();[m
[32m+[m[32mconst upload = multer({[m
[32m+[m[32m  storage: storage,[m
[32m+[m[32m  limits: {[m
[32m+[m[32m    fileSize: 5 * 1024 * 1024, // 5MB limit[m
[32m+[m[32m  },[m
[32m+[m[32m  fileFilter: (req, file, cb) => {[m
[32m+[m[32m    if (file.mimetype.startsWith('image/')) {[m
[32m+[m[32m      cb(null, true);[m
[32m+[m[32m    } else {[m
[32m+[m[32m      cb(new Error('Only image files are allowed'), false);[m
[32m+[m[32m    }[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// GET /api/clients/images[m
[32m+[m[32mrouter.get('/clients/images', async (req, res) => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const images = await ClientImage.find({ isActive: true }).sort({ createdAt: -1 }).lean();[m
[32m+[m[32m    res.json({ success: true, data: images });[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    logger.error('Error fetching client images:', err);[m
[32m+[m[32m    res.status(500).json({ success: false, error: err.message });[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// POST /api/clients/images - Upload new client image[m
[32m+[m[32mrouter.post('/clients/images', upload.single('image'), async (req, res) => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    if (!req.file) {[m
[32m+[m[32m      return res.status(400).json({ success: false, error: 'No image file provided' });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    const { fileName } = req.body;[m
[32m+[m[41m    [m
[32m+[m[32m    // Upload to Cloudinary[m
[32m+[m[32m    const uploadResult = await cloudinaryService.uploadFromBuffer(req.file.buffer, {[m
[32m+[m[32m      folder: 'cbm/clients',[m
[32m+[m[32m      tags: ['clients', 'cbm'],[m
[32m+[m[32m      transformation: [[m
[32m+[m[32m        { quality: 'auto:good' },[m
[32m+[m[32m        { fetch_format: 'auto' }[m
[32m+[m[32m      ][m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    // Save to database[m
[32m+[m[32m    const clientImage = new ClientImage({[m
[32m+[m[32m      fileName: fileName || req.file.originalname,[m
[32m+[m[32m      url: uploadResult.url,[m
[32m+[m[32m      public_id: uploadResult.public_id,[m
[32m+[m[32m      width: uploadResult.width,[m
[32m+[m[32m      height: uploadResult.height,[m
[32m+[m[32m      format: uploadResult.format,[m
[32m+[m[32m      size: uploadResult.size,[m
[32m+[m[32m      tags: ['clients', 'cbm'],[m
[32m+[m[32m      isActive: true[m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m    await clientImage.save();[m
[32m+[m
[32m+[m[32m    logger.info(`Client image uploaded successfully: ${uploadResult.url}`);[m
[32m+[m[32m    res.json({[m[41m [m
[32m+[m[32m      success: true,[m[41m [m
[32m+[m[32m      message: 'Image uploaded successfully',[m
[32m+[m[32m      data: clientImage[m[41m [m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    logger.error('Error uploading client image:', err);[m
[32m+[m[32m    res.status(500).json({ success: false, error: err.message });[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32m// DELETE /api/clients/images/:id - Delete client image[m
[32m+[m[32mrouter.delete('/clients/images/:id', async (req, res) => {[m
[32m+[m[32m  try {[m
[32m+[m[32m    const { id } = req.params;[m
[32m+[m[41m    [m
[32m+[m[32m    // Find the image in database[m
[32m+[m[32m    const clientImage = await ClientImage.findById(id);[m
[32m+[m[32m    if (!clientImage) {[m
[32m+[m[32m      return res.status(404).json({ success: false, error: 'Image not found' });[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Delete from Cloudinary[m
[32m+[m[32m    if (clientImage.public_id) {[m
[32m+[m[32m      try {[m
[32m+[m[32m        await cloudinaryService.deleteImage(clientImage.public_id);[m
[32m+[m[32m        logger.info(`Image deleted from Cloudinary: ${clientImage.public_id}`);[m
[32m+[m[32m      } catch (cloudinaryErr) {[m
[32m+[m[32m        logger.warn(`Failed to delete from Cloudinary: ${cloudinaryErr.message}`);[m
[32m+[m[32m        // Continue with database deletion even if Cloudinary deletion fails[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Delete from database[m
[32m+[m[32m    await ClientImage.findByIdAndDelete(id);[m
[32m+[m
[32m+[m[32m    logger.info(`Client image deleted successfully: ${clientImage._id}`);[m
[32m+[m[32m    res.json({[m[41m [m
[32m+[m[32m      success: true,[m[41m [m
[32m+[m[32m      message: 'Image deleted successfully'[m[41m [m
[32m+[m[32m    });[m
[32m+[m
[32m+[m[32m  } catch (err) {[m
[32m+[m[32m    logger.error('Error deleting client image:', err);[m
[32m+[m[32m    res.status(500).json({ success: false, error: err.message });[m
[32m+[m[32m  }[m
[32m+[m[32m});[m
[32m+[m
[32m+[m[32mmodule.exports = router;[m
[32m+[m
[32m+[m
