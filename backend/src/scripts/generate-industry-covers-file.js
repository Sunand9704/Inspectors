'use strict';

const path = require('path');
const fs = require('fs');

function pathToFileURL(p) {
  const { pathToFileURL: toURL } = require('url');
  return toURL(p);
}

async function importIndustryImages(imagesJsFile) {
  const mod = await import(pathToFileURL(imagesJsFile).href);
  return mod.default || mod.industryImages || {};
}

function buildCoversJsContent(coversMap) {
  const lines = [];
  lines.push('// Auto-generated by backend/src/scripts/generate-industry-covers-file.js');
  lines.push('// Do not edit manually. Re-run the script to update.');
  lines.push('');
  lines.push('export const industryCovers = {');
  for (const [key, val] of Object.entries(coversMap)) {
    lines.push(`  "${key}": {`);
    lines.push(`    name: ${JSON.stringify(val.name)},`);
    lines.push('    coverImages: [');
    for (const u of val.coverImages || []) {
      lines.push(`      { file: ${JSON.stringify(u.file)}, url: ${JSON.stringify(u.url)}, publicId: ${JSON.stringify(u.publicId)} },`);
    }
    lines.push('    ]');
    lines.push('  },');
  }
  lines.push('};');
  lines.push('');
  lines.push('export default industryCovers;');
  lines.push('');
  return lines.join('\n');
}

async function main() {
  const repoRoot = path.resolve(__dirname, '../../..');
  const imagesJsPath = path.join(repoRoot, 'frontend', 'src', 'images.js');
  const coversJsPath = path.join(repoRoot, 'frontend', 'src', 'industryCovers.js');

  await fs.promises.access(imagesJsPath, fs.constants.R_OK);
  const images = await importIndustryImages(imagesJsPath);

  const coversMap = {};
  for (const [key, val] of Object.entries(images)) {
    coversMap[key] = {
      name: val?.name || key,
      coverImages: Array.isArray(val?.coverImages) ? val.coverImages : []
    };
  }

  await fs.promises.mkdir(path.dirname(coversJsPath), { recursive: true });
  const content = buildCoversJsContent(coversMap);
  await fs.promises.writeFile(coversJsPath, content, 'utf8');
  // eslint-disable-next-line no-console
  console.log(`Wrote ${coversJsPath}`);
}

main().catch((err) => {
  // eslint-disable-next-line no-console
  console.error(err);
  process.exit(1);
});


